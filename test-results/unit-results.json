{"numTotalTestSuites":42,"numPassedTestSuites":42,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":60,"numPassedTests":60,"numFailedTests":0,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1751977793664,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should have abstract DSL interfaces","status":"passed","title":"should have abstract DSL interfaces","duration":8.562685000000016,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should have base reader implementation","status":"passed","title":"should have base reader implementation","duration":29.926091999999983,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should have CoinGecko actor implementation","status":"passed","title":"should have CoinGecko actor implementation","duration":33.755386000000044,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should have Result type system","status":"passed","title":"should have Result type system","duration":0.2975110000000427,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should create CoinGecko reader successfully","status":"passed","title":"should create CoinGecko reader successfully","duration":11.434949000000017,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should verify handler architecture pattern","status":"passed","title":"should verify handler architecture pattern","duration":1.624939999999981,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should have proper Result type integration","status":"passed","title":"should have proper Result type integration","duration":0.2952319999999986,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should verify data types are properly exported","status":"passed","title":"should verify data types are properly exported","duration":4.36333099999996,"failureMessages":[],"meta":{}},{"ancestorTitles":["QiCore 2-Layer Architecture"],"fullName":"QiCore 2-Layer Architecture should verify factory functions work","status":"passed","title":"should verify factory functions work","duration":1.7412980000000289,"failureMessages":[],"meta":{}}],"startTime":1751977793904,"endTime":1751977793995.7412,"status":"passed","message":"","name":"/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/basic-architecture.test.ts"},{"assertionResults":[{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Client Management (BaseReader functionality)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should add and retrieve clients","status":"passed","title":"should add and retrieve clients","duration":11.29136699999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Client Management (BaseReader functionality)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should remove clients","status":"passed","title":"should remove clients","duration":1.4364350000000172,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Client Management (BaseReader functionality)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should get clients by type","status":"passed","title":"should get clients by type","duration":0.8285419999999704,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Client Management (BaseReader functionality)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should get all clients","status":"passed","title":"should get all clients","duration":0.3160219999999754,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","DSL Method Implementation (BaseReader workflow)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) DSL Method Implementation (BaseReader workflow) should have all DSL methods available from BaseReader","status":"passed","title":"should have all DSL methods available from BaseReader","duration":0.40807700000004843,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","DSL Method Implementation (BaseReader workflow)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) DSL Method Implementation (BaseReader workflow) should return Result<T> types from DSL methods","status":"passed","title":"should return Result<T> types from DSL methods","duration":0.8645959999999491,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","DSL Method Implementation (BaseReader workflow)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) DSL Method Implementation (BaseReader workflow) should handle no active client gracefully","status":"passed","title":"should handle no active client gracefully","duration":0.31162499999999227,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Activity Tracking (BaseReader functionality)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Activity Tracking (BaseReader functionality) should track query count and last activity","status":"passed","title":"should track query count and last activity","duration":0.2860239999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Lifecycle Management (BaseReader functionality)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Lifecycle Management (BaseReader functionality) should initialize and cleanup properly","status":"passed","title":"should initialize and cleanup properly","duration":0.6539230000000202,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Error Handling (BaseReader workflow)"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Error Handling (BaseReader workflow) should handle error cases gracefully","status":"passed","title":"should handle error cases gracefully","duration":0.25718599999999014,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Inheritance Verification"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Inheritance Verification should verify CoinGecko reader extends BaseReader","status":"passed","title":"should verify CoinGecko reader extends BaseReader","duration":0.2930979999999863,"failureMessages":[],"meta":{}},{"ancestorTitles":["BaseReader (tested via CoinGeckoMarketDataReader)","Inheritance Verification"],"fullName":"BaseReader (tested via CoinGeckoMarketDataReader) Inheritance Verification should have proper status reporting","status":"passed","title":"should have proper status reporting","duration":0.274236999999971,"failureMessages":[],"meta":{}}],"startTime":1751977793979,"endTime":1751977793996.2932,"status":"passed","message":"","name":"/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/base/BaseReader.test.ts"},{"assertionResults":[{"ancestorTitles":["RedpandaConfigManager","getInstance"],"fullName":"RedpandaConfigManager getInstance should return singleton instance","status":"passed","title":"should return singleton instance","duration":0.9132649999999956,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","getConfig"],"fullName":"RedpandaConfigManager getConfig should return default configuration","status":"passed","title":"should return default configuration","duration":0.44441399999999476,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","getConfig"],"fullName":"RedpandaConfigManager getConfig should use environment variables when provided","status":"passed","title":"should use environment variables when provided","duration":0.1655719999999974,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","getConfig"],"fullName":"RedpandaConfigManager getConfig should handle invalid numeric environment variables","status":"passed","title":"should handle invalid numeric environment variables","duration":0.17752100000001292,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","updateConfig"],"fullName":"RedpandaConfigManager updateConfig should update configuration partially","status":"passed","title":"should update configuration partially","duration":0.12025500000001443,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","updateConfig"],"fullName":"RedpandaConfigManager updateConfig should not mutate original config","status":"passed","title":"should not mutate original config","duration":0.11346799999998325,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","getMCPConfig"],"fullName":"RedpandaConfigManager getMCPConfig should return MCP server configuration","status":"passed","title":"should return MCP server configuration","duration":0.13408699999999385,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","getMCPConfig"],"fullName":"RedpandaConfigManager getMCPConfig should use custom broker configuration","status":"passed","title":"should use custom broker configuration","duration":0.14692199999998934,"failureMessages":[],"meta":{}},{"ancestorTitles":["RedpandaConfigManager","getMCPConfig"],"fullName":"RedpandaConfigManager getMCPConfig should use environment variables for MCP settings","status":"passed","title":"should use environment variables for MCP settings","duration":0.16066699999998946,"failureMessages":[],"meta":{}}],"startTime":1751977793907,"endTime":1751977793909.1606,"status":"passed","message":"","name":"/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/base/redpanda-config.test.ts"},{"assertionResults":[{"ancestorTitles":["MarketDataReadingDSL Interface","getCurrentPrice"],"fullName":"MarketDataReadingDSL Interface getCurrentPrice should return current price for a cryptocurrency","status":"passed","title":"should return current price for a cryptocurrency","duration":0.8150499999999852,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getCurrentPrice"],"fullName":"MarketDataReadingDSL Interface getCurrentPrice should use USD as default currency","status":"passed","title":"should use USD as default currency","duration":0.10243400000001657,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getCurrentPrices"],"fullName":"MarketDataReadingDSL Interface getCurrentPrices should return prices for multiple cryptocurrencies","status":"passed","title":"should return prices for multiple cryptocurrencies","duration":0.33833599999996977,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getCurrentPrices"],"fullName":"MarketDataReadingDSL Interface getCurrentPrices should handle options parameter","status":"passed","title":"should handle options parameter","duration":0.08201999999999998,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getCurrentOHLCV"],"fullName":"MarketDataReadingDSL Interface getCurrentOHLCV should return OHLCV data for a cryptocurrency","status":"passed","title":"should return OHLCV data for a cryptocurrency","duration":0.28689000000002807,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getCurrentOHLCV"],"fullName":"MarketDataReadingDSL Interface getCurrentOHLCV should default to daily interval","status":"passed","title":"should default to daily interval","duration":0.06991599999997788,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getLatestOHLCV"],"fullName":"MarketDataReadingDSL Interface getLatestOHLCV should return multiple OHLCV candles","status":"passed","title":"should return multiple OHLCV candles","duration":0.08743100000003778,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getLatestOHLCV"],"fullName":"MarketDataReadingDSL Interface getLatestOHLCV should default to 10 candles and daily interval","status":"passed","title":"should default to 10 candles and daily interval","duration":0.10692099999999982,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getPriceHistory"],"fullName":"MarketDataReadingDSL Interface getPriceHistory should return price history for date range","status":"passed","title":"should return price history for date range","duration":0.2022010000000023,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getOHLCVByDateRange"],"fullName":"MarketDataReadingDSL Interface getOHLCVByDateRange should return OHLCV data for date range","status":"passed","title":"should return OHLCV data for date range","duration":0.10422599999998283,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getAvailableTickers"],"fullName":"MarketDataReadingDSL Interface getAvailableTickers should return available cryptocurrency tickers","status":"passed","title":"should return available cryptocurrency tickers","duration":0.08564400000000205,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getAvailableTickers"],"fullName":"MarketDataReadingDSL Interface getAvailableTickers should default to 100 tickers","status":"passed","title":"should default to 100 tickers","duration":0.03440899999998237,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getLevel1Data"],"fullName":"MarketDataReadingDSL Interface getLevel1Data should return Level 1 market data","status":"passed","title":"should return Level 1 market data","duration":0.12125400000002173,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","getMarketAnalytics"],"fullName":"MarketDataReadingDSL Interface getMarketAnalytics should return global market analytics","status":"passed","title":"should return global market analytics","duration":0.1426450000000159,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataReadingDSL Interface","Result<T> Pattern Compliance"],"fullName":"MarketDataReadingDSL Interface Result<T> Pattern Compliance should return Result<T> from all methods","status":"passed","title":"should return Result<T> from all methods","duration":1.6352770000000305,"failureMessages":[],"meta":{}}],"startTime":1751977793941,"endTime":1751977793945.6353,"status":"passed","message":"","name":"/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/dsl/MarketDataReadingDSL.test.ts"},{"assertionResults":[{"ancestorTitles":["MarketDataWritingDSL Interface","publishPrice"],"fullName":"MarketDataWritingDSL Interface publishPrice should publish single cryptocurrency price","status":"passed","title":"should publish single cryptocurrency price","duration":1.6840349999999944,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishPrices"],"fullName":"MarketDataWritingDSL Interface publishPrices should publish multiple cryptocurrency prices","status":"passed","title":"should publish multiple cryptocurrency prices","duration":0.4244380000000092,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishPrices"],"fullName":"MarketDataWritingDSL Interface publishPrices should handle empty array","status":"passed","title":"should handle empty array","duration":0.07070599999997285,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishOHLCV"],"fullName":"MarketDataWritingDSL Interface publishOHLCV should publish single OHLCV data","status":"passed","title":"should publish single OHLCV data","duration":0.09309899999999516,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishOHLCVBatch"],"fullName":"MarketDataWritingDSL Interface publishOHLCVBatch should publish multiple OHLCV data","status":"passed","title":"should publish multiple OHLCV data","duration":0.11921899999998686,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishMarketAnalytics"],"fullName":"MarketDataWritingDSL Interface publishMarketAnalytics should publish market analytics data","status":"passed","title":"should publish market analytics data","duration":0.08998399999995854,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishLevel1Data"],"fullName":"MarketDataWritingDSL Interface publishLevel1Data should publish Level 1 market data","status":"passed","title":"should publish Level 1 market data","duration":0.09069900000002917,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishPriceHistory"],"fullName":"MarketDataWritingDSL Interface publishPriceHistory should publish price history data","status":"passed","title":"should publish price history data","duration":0.09272899999996298,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishCustomData"],"fullName":"MarketDataWritingDSL Interface publishCustomData should publish custom data without schema","status":"passed","title":"should publish custom data without schema","duration":0.10593099999999822,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishCustomData"],"fullName":"MarketDataWritingDSL Interface publishCustomData should publish custom data with schema","status":"passed","title":"should publish custom data with schema","duration":0.05992999999995163,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","publishBatch"],"fullName":"MarketDataWritingDSL Interface publishBatch should publish mixed batch data","status":"passed","title":"should publish mixed batch data","duration":0.06938100000002123,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","flush"],"fullName":"MarketDataWritingDSL Interface flush should flush pending data","status":"passed","title":"should flush pending data","duration":0.04642999999998665,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","Result<T> Pattern Compliance"],"fullName":"MarketDataWritingDSL Interface Result<T> Pattern Compliance should return Result<T> from all methods","status":"passed","title":"should return Result<T> from all methods","duration":0.8985069999999951,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","Data Validation"],"fullName":"MarketDataWritingDSL Interface Data Validation should handle required fields in CryptoPriceData","status":"passed","title":"should handle required fields in CryptoPriceData","duration":0.06827999999995882,"failureMessages":[],"meta":{}},{"ancestorTitles":["MarketDataWritingDSL Interface","Data Validation"],"fullName":"MarketDataWritingDSL Interface Data Validation should handle required fields in CryptoOHLCVData","status":"passed","title":"should handle required fields in CryptoOHLCVData","duration":0.04364600000002383,"failureMessages":[],"meta":{}}],"startTime":1751977793943,"endTime":1751977793947.0684,"status":"passed","message":"","name":"/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/dsl/MarketDataWritingDSL.test.ts"}]}