{
  "numTotalTestSuites": 42,
  "numPassedTestSuites": 42,
  "numFailedTestSuites": 0,
  "numPendingTestSuites": 0,
  "numTotalTests": 60,
  "numPassedTests": 60,
  "numFailedTests": 0,
  "numPendingTests": 0,
  "numTodoTests": 0,
  "snapshot": {
    "added": 0,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0,
    "didUpdate": false
  },
  "startTime": 1751983058985,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should have abstract DSL interfaces",
          "status": "passed",
          "title": "should have abstract DSL interfaces",
          "duration": 7.202708999999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should have base reader implementation",
          "status": "passed",
          "title": "should have base reader implementation",
          "duration": 38.790786000000026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should have CoinGecko actor implementation",
          "status": "passed",
          "title": "should have CoinGecko actor implementation",
          "duration": 28.604179999999985,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should have Result type system",
          "status": "passed",
          "title": "should have Result type system",
          "duration": 0.2835659999999507,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should create CoinGecko reader successfully",
          "status": "passed",
          "title": "should create CoinGecko reader successfully",
          "duration": 12.269041999999956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should verify handler architecture pattern",
          "status": "passed",
          "title": "should verify handler architecture pattern",
          "duration": 4.019805000000019,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should have proper Result type integration",
          "status": "passed",
          "title": "should have proper Result type integration",
          "duration": 0.2863029999999753,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should verify data types are properly exported",
          "status": "passed",
          "title": "should verify data types are properly exported",
          "duration": 2.360617999999988,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["QiCore 2-Layer Architecture"],
          "fullName": "QiCore 2-Layer Architecture should verify factory functions work",
          "status": "passed",
          "title": "should verify factory functions work",
          "duration": 1.828692999999987,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1751983059209,
      "endTime": 1751983059304.8286,
      "status": "passed",
      "message": "",
      "name": "/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/basic-architecture.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Client Management (BaseReader functionality)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should add and retrieve clients",
          "status": "passed",
          "title": "should add and retrieve clients",
          "duration": 11.104926999999975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Client Management (BaseReader functionality)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should remove clients",
          "status": "passed",
          "title": "should remove clients",
          "duration": 1.4712089999999876,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Client Management (BaseReader functionality)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should get clients by type",
          "status": "passed",
          "title": "should get clients by type",
          "duration": 0.8608050000000276,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Client Management (BaseReader functionality)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Client Management (BaseReader functionality) should get all clients",
          "status": "passed",
          "title": "should get all clients",
          "duration": 0.40233100000000377,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "DSL Method Implementation (BaseReader workflow)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) DSL Method Implementation (BaseReader workflow) should have all DSL methods available from BaseReader",
          "status": "passed",
          "title": "should have all DSL methods available from BaseReader",
          "duration": 2.132060000000024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "DSL Method Implementation (BaseReader workflow)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) DSL Method Implementation (BaseReader workflow) should return Result<T> types from DSL methods",
          "status": "passed",
          "title": "should return Result<T> types from DSL methods",
          "duration": 0.8542439999999942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "DSL Method Implementation (BaseReader workflow)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) DSL Method Implementation (BaseReader workflow) should handle no active client gracefully",
          "status": "passed",
          "title": "should handle no active client gracefully",
          "duration": 0.3028580000000147,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Activity Tracking (BaseReader functionality)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Activity Tracking (BaseReader functionality) should track query count and last activity",
          "status": "passed",
          "title": "should track query count and last activity",
          "duration": 0.2782189999999787,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Lifecycle Management (BaseReader functionality)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Lifecycle Management (BaseReader functionality) should initialize and cleanup properly",
          "status": "passed",
          "title": "should initialize and cleanup properly",
          "duration": 0.6950760000000287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Error Handling (BaseReader workflow)"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Error Handling (BaseReader workflow) should handle error cases gracefully",
          "status": "passed",
          "title": "should handle error cases gracefully",
          "duration": 0.2672709999999938,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Inheritance Verification"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Inheritance Verification should verify CoinGecko reader extends BaseReader",
          "status": "passed",
          "title": "should verify CoinGecko reader extends BaseReader",
          "duration": 0.5043630000000121,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "BaseReader (tested via CoinGeckoMarketDataReader)",
            "Inheritance Verification"
          ],
          "fullName": "BaseReader (tested via CoinGeckoMarketDataReader) Inheritance Verification should have proper status reporting",
          "status": "passed",
          "title": "should have proper status reporting",
          "duration": 0.5601120000000037,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1751983059284,
      "endTime": 1751983059304.56,
      "status": "passed",
      "message": "",
      "name": "/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/base/BaseReader.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RedpandaConfigManager", "getInstance"],
          "fullName": "RedpandaConfigManager getInstance should return singleton instance",
          "status": "passed",
          "title": "should return singleton instance",
          "duration": 0.846933000000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "getConfig"],
          "fullName": "RedpandaConfigManager getConfig should return default configuration",
          "status": "passed",
          "title": "should return default configuration",
          "duration": 0.4512279999999862,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "getConfig"],
          "fullName": "RedpandaConfigManager getConfig should use environment variables when provided",
          "status": "passed",
          "title": "should use environment variables when provided",
          "duration": 0.190369000000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "getConfig"],
          "fullName": "RedpandaConfigManager getConfig should handle invalid numeric environment variables",
          "status": "passed",
          "title": "should handle invalid numeric environment variables",
          "duration": 0.1527889999999843,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "updateConfig"],
          "fullName": "RedpandaConfigManager updateConfig should update configuration partially",
          "status": "passed",
          "title": "should update configuration partially",
          "duration": 0.11776100000000156,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "updateConfig"],
          "fullName": "RedpandaConfigManager updateConfig should not mutate original config",
          "status": "passed",
          "title": "should not mutate original config",
          "duration": 0.0932250000000181,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "getMCPConfig"],
          "fullName": "RedpandaConfigManager getMCPConfig should return MCP server configuration",
          "status": "passed",
          "title": "should return MCP server configuration",
          "duration": 0.169557999999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "getMCPConfig"],
          "fullName": "RedpandaConfigManager getMCPConfig should use custom broker configuration",
          "status": "passed",
          "title": "should use custom broker configuration",
          "duration": 0.1627059999999858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["RedpandaConfigManager", "getMCPConfig"],
          "fullName": "RedpandaConfigManager getMCPConfig should use environment variables for MCP settings",
          "status": "passed",
          "title": "should use environment variables for MCP settings",
          "duration": 0.17709399999998254,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1751983059216,
      "endTime": 1751983059219.177,
      "status": "passed",
      "message": "",
      "name": "/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/base/redpanda-config.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getCurrentPrice"],
          "fullName": "MarketDataReadingDSL Interface getCurrentPrice should return current price for a cryptocurrency",
          "status": "passed",
          "title": "should return current price for a cryptocurrency",
          "duration": 0.7194859999999608,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getCurrentPrice"],
          "fullName": "MarketDataReadingDSL Interface getCurrentPrice should use USD as default currency",
          "status": "passed",
          "title": "should use USD as default currency",
          "duration": 0.077212999999972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getCurrentPrices"],
          "fullName": "MarketDataReadingDSL Interface getCurrentPrices should return prices for multiple cryptocurrencies",
          "status": "passed",
          "title": "should return prices for multiple cryptocurrencies",
          "duration": 0.3080919999999878,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getCurrentPrices"],
          "fullName": "MarketDataReadingDSL Interface getCurrentPrices should handle options parameter",
          "status": "passed",
          "title": "should handle options parameter",
          "duration": 0.06371400000000449,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getCurrentOHLCV"],
          "fullName": "MarketDataReadingDSL Interface getCurrentOHLCV should return OHLCV data for a cryptocurrency",
          "status": "passed",
          "title": "should return OHLCV data for a cryptocurrency",
          "duration": 0.2437089999999671,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getCurrentOHLCV"],
          "fullName": "MarketDataReadingDSL Interface getCurrentOHLCV should default to daily interval",
          "status": "passed",
          "title": "should default to daily interval",
          "duration": 0.061940999999990254,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getLatestOHLCV"],
          "fullName": "MarketDataReadingDSL Interface getLatestOHLCV should return multiple OHLCV candles",
          "status": "passed",
          "title": "should return multiple OHLCV candles",
          "duration": 0.08674100000001772,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getLatestOHLCV"],
          "fullName": "MarketDataReadingDSL Interface getLatestOHLCV should default to 10 candles and daily interval",
          "status": "passed",
          "title": "should default to 10 candles and daily interval",
          "duration": 0.06803200000001652,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getPriceHistory"],
          "fullName": "MarketDataReadingDSL Interface getPriceHistory should return price history for date range",
          "status": "passed",
          "title": "should return price history for date range",
          "duration": 0.17332899999996698,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getOHLCVByDateRange"],
          "fullName": "MarketDataReadingDSL Interface getOHLCVByDateRange should return OHLCV data for date range",
          "status": "passed",
          "title": "should return OHLCV data for date range",
          "duration": 0.08116300000000365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getAvailableTickers"],
          "fullName": "MarketDataReadingDSL Interface getAvailableTickers should return available cryptocurrency tickers",
          "status": "passed",
          "title": "should return available cryptocurrency tickers",
          "duration": 0.07145100000002458,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getAvailableTickers"],
          "fullName": "MarketDataReadingDSL Interface getAvailableTickers should default to 100 tickers",
          "status": "passed",
          "title": "should default to 100 tickers",
          "duration": 0.03223800000000665,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getLevel1Data"],
          "fullName": "MarketDataReadingDSL Interface getLevel1Data should return Level 1 market data",
          "status": "passed",
          "title": "should return Level 1 market data",
          "duration": 0.11864600000001246,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "getMarketAnalytics"],
          "fullName": "MarketDataReadingDSL Interface getMarketAnalytics should return global market analytics",
          "status": "passed",
          "title": "should return global market analytics",
          "duration": 0.15960199999994984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataReadingDSL Interface", "Result<T> Pattern Compliance"],
          "fullName": "MarketDataReadingDSL Interface Result<T> Pattern Compliance should return Result<T> from all methods",
          "status": "passed",
          "title": "should return Result<T> from all methods",
          "duration": 0.7584039999999845,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1751983059261,
      "endTime": 1751983059264.7583,
      "status": "passed",
      "message": "",
      "name": "/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/dsl/MarketDataReadingDSL.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishPrice"],
          "fullName": "MarketDataWritingDSL Interface publishPrice should publish single cryptocurrency price",
          "status": "passed",
          "title": "should publish single cryptocurrency price",
          "duration": 0.862357999999972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishPrices"],
          "fullName": "MarketDataWritingDSL Interface publishPrices should publish multiple cryptocurrency prices",
          "status": "passed",
          "title": "should publish multiple cryptocurrency prices",
          "duration": 0.2826780000000326,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishPrices"],
          "fullName": "MarketDataWritingDSL Interface publishPrices should handle empty array",
          "status": "passed",
          "title": "should handle empty array",
          "duration": 0.06271299999997382,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishOHLCV"],
          "fullName": "MarketDataWritingDSL Interface publishOHLCV should publish single OHLCV data",
          "status": "passed",
          "title": "should publish single OHLCV data",
          "duration": 0.08803000000000338,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishOHLCVBatch"],
          "fullName": "MarketDataWritingDSL Interface publishOHLCVBatch should publish multiple OHLCV data",
          "status": "passed",
          "title": "should publish multiple OHLCV data",
          "duration": 0.10461199999997461,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishMarketAnalytics"],
          "fullName": "MarketDataWritingDSL Interface publishMarketAnalytics should publish market analytics data",
          "status": "passed",
          "title": "should publish market analytics data",
          "duration": 0.10229600000002392,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishLevel1Data"],
          "fullName": "MarketDataWritingDSL Interface publishLevel1Data should publish Level 1 market data",
          "status": "passed",
          "title": "should publish Level 1 market data",
          "duration": 0.09403300000002446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishPriceHistory"],
          "fullName": "MarketDataWritingDSL Interface publishPriceHistory should publish price history data",
          "status": "passed",
          "title": "should publish price history data",
          "duration": 0.09013199999998278,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishCustomData"],
          "fullName": "MarketDataWritingDSL Interface publishCustomData should publish custom data without schema",
          "status": "passed",
          "title": "should publish custom data without schema",
          "duration": 0.1073030000000017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishCustomData"],
          "fullName": "MarketDataWritingDSL Interface publishCustomData should publish custom data with schema",
          "status": "passed",
          "title": "should publish custom data with schema",
          "duration": 0.05838499999998703,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "publishBatch"],
          "fullName": "MarketDataWritingDSL Interface publishBatch should publish mixed batch data",
          "status": "passed",
          "title": "should publish mixed batch data",
          "duration": 0.06295500000004495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "flush"],
          "fullName": "MarketDataWritingDSL Interface flush should flush pending data",
          "status": "passed",
          "title": "should flush pending data",
          "duration": 0.04346499999996922,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "Result<T> Pattern Compliance"],
          "fullName": "MarketDataWritingDSL Interface Result<T> Pattern Compliance should return Result<T> from all methods",
          "status": "passed",
          "title": "should return Result<T> from all methods",
          "duration": 0.8546140000000264,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "Data Validation"],
          "fullName": "MarketDataWritingDSL Interface Data Validation should handle required fields in CryptoPriceData",
          "status": "passed",
          "title": "should handle required fields in CryptoPriceData",
          "duration": 0.07094899999998461,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MarketDataWritingDSL Interface", "Data Validation"],
          "fullName": "MarketDataWritingDSL Interface Data Validation should handle required fields in CryptoOHLCVData",
          "status": "passed",
          "title": "should handle required fields in CryptoOHLCVData",
          "duration": 0.0453340000000253,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1751983059261,
      "endTime": 1751983059264.071,
      "status": "passed",
      "message": "",
      "name": "/home/zzhang/dev/qi/github/qi-v2-dp-ts-actor/lib/tests/unit/dsl/MarketDataWritingDSL.test.ts"
    }
  ]
}
